#!/usr/bin/env python3
import os
import time
import uuid
import signal
import sys
import threading
import io
from confluent_kafka import Consumer
from minio import Minio
import h5py
from http.server import HTTPServer, BaseHTTPRequestHandler

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# 1. –ö–æ–Ω—Ñ–∏–≥–∏ —á–µ—Ä–µ–∑ ENV (—Å—Ç–∞–≤—å —Å–µ–±–µ –ø—Ä–∏ —Ç–µ—Å—Ç–µ SLICE_SEC=10 SLICE_COUNT=100)
KAFKA_BOOTSTRAP = os.getenv("KAFKA_BOOTSTRAP", "kafka.default.svc.cluster.local:9092")
DETECTOR       = os.getenv("DETECTOR",       "MPD")
SLICE_SEC      = int(os.getenv("SLICE_SEC",   "10"))
SLICE_COUNT    = int(os.getenv("SLICE_COUNT", "100"))
MINIO_ENDPOINT = os.getenv("MINIO_ENDPOINT", "minio.default.svc.cluster.local:9000")
MINIO_ACCESS   = os.getenv("MINIO_ACCESS_KEY", "minioadmin")
MINIO_SECRET   = os.getenv("MINIO_SECRET_KEY", "minioadmin")
MINIO_BUCKET   = os.getenv("MINIO_BUCKET",    "spd-events")

RAW_TOPIC      = f"{DETECTOR}.filtered"
OUT_PATH       = "/data/slices"  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å—Ä–µ–∑–æ–≤

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# 2. Health HTTP-—Å–µ—Ä–≤–µ—Ä
class HealthCheck(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path in ("/healthz", "/readyz"):
            self.send_response(200)
            self.end_headers(); self.wfile.write(b"OK")
        else:
            self.send_response(404); self.end_headers()

def start_health():
    srv = HTTPServer(("0.0.0.0", 8080), HealthCheck)
    print("ü©∫ Health on 0.0.0.0:8080")
    srv.serve_forever()

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# 3. Graceful shutdown
running = True
def shutdown(sig, frame):
    global running
    print("üëã Shutdown")
    running = False

signal.signal(signal.SIGINT, shutdown)
signal.signal(signal.SIGTERM, shutdown)

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# 4. Init Kafka consumer + MinIO client
consumer = Consumer({
    'bootstrap.servers': KAFKA_BOOTSTRAP,
    'group.id': f"builder-{DETECTOR}",
    'auto.offset.reset': 'earliest'
})
consumer.subscribe([RAW_TOPIC])
print(f"üîß Subscribed to {RAW_TOPIC} @ {KAFKA_BOOTSTRAP}")

minio = Minio(
    MINIO_ENDPOINT,
    access_key=MINIO_ACCESS,
    secret_key=MINIO_SECRET,
    secure=False
)
print(f"üì¶ MinIO ‚Üí {MINIO_ENDPOINT}/{MINIO_BUCKET}")

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
def make_h5(filename, records):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (uuid, ts, payload) –≤ HDF5."""
    path = os.path.join(OUT_PATH, filename)
    with h5py.File(path, "w") as f:
        grp = f.create_group("events")
        # —Å—Ç—Ä–æ–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ special dtype:
        dt_str = h5py.string_dtype(encoding='utf-8')
        grp.create_dataset("id",      data=[r[0] for r in records], dtype=dt_str)
        grp.create_dataset("ts",      data=[r[1] for r in records], dtype=dt_str)
        grp.create_dataset("payload", data=[r[2] for r in records], dtype=dt_str)
    print(f"‚úÖ HDF5 written: {path}")
    return path

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
def main_loop():
    seq = 0
    buffer = []
    ts0 = time.time()

    while running:
        msg = consumer.poll(1.0)
        if msg is None or msg.error():
            continue

        raw = msg.value().decode("utf-8")
        
        if "|" not in raw:
            print(f"‚ö†Ô∏è Builder: malformed message (no delimiter), skipping: ¬´{raw}¬ª")
            continue
        # —Ä–∞–∑–æ–±—å—ë–º –ø–æ –ø–µ—Ä–≤–æ–π ‚îÇ
        uid = str(uuid.uuid4())
        ts, payload = raw.split("|", 1)
        buffer.append((uid, ts, payload))

        # —É—Å–ª–æ–≤–∏–µ —Å—Ä–µ–∑–∞
        if (time.time() - ts0 >= SLICE_SEC) or (len(buffer) >= SLICE_COUNT):
            # –∏–º—è: spd-MPD-YYYYMMDD-HHMMSS-<seq>.h5
            tstamp = time.strftime("%Y%m%d-%H%M%S", time.localtime(ts0))
            fname  = f"spd-{DETECTOR}-{tstamp}-{seq}.h5"
            seq += 1

            # 1) –ª–æ–∫–∞–ª—å–Ω—ã–π HDF5
            local = make_h5(fname, buffer)

            # 2) –ø—É—à–∏–º –≤ MinIO
            size = os.path.getsize(local)
            with open(local, "rb") as fd:
                minio.put_object(MINIO_BUCKET, fname, data=fd, length=size)
            print(f"üöÄ Uploaded to MinIO: {fname} ({size} B)")

            # 3) –æ—á–∏—Å—Ç–∫–∞
            buffer.clear()
            ts0 = time.time()

    consumer.close()
    print("üèÅ Builder stopped")

if __name__ == "__main__":
    # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –µ—Å—Ç—å
    os.makedirs(OUT_PATH, exist_ok=True)

    # —Å—Ç–∞—Ä—Ç—É–µ–º health
    threading.Thread(target=start_health, daemon=True).start()
    # –∑–∞–ø—É—Å–∫–∞–µ–º main
    main_loop()
